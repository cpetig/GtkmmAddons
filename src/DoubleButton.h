// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKMM_DOUBLEBUTTON_H
#define _GTKMM_DOUBLEBUTTON_H


#include <glibmm.h>

/* $Id: DoubleButton.hg,v 1.4 2004/04/29 14:24:40 christof Exp $ */

/* searchcombo.h
 * 
 * Copyright (C) 1999-2002 Adolf Petig GmbH & Co. KG
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/button.h>
#include <doublebutton.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _doublebutton doublebutton;
typedef struct _doublebuttonClass doublebuttonClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace ManuProC
{ class DoubleButton_Class; } // namespace ManuProC
namespace ManuProC {

//: DoubleButton widget (doublebutton is the C name)

class DoubleButton : public Gtk::Button
{
 public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef DoubleButton CppObjectType;
  typedef DoubleButton_Class CppClassType;
  typedef doublebutton BaseObjectType;
  typedef doublebuttonClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~DoubleButton();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class DoubleButton_Class;
  static CppClassType doublebutton_class_;

  // noncopyable
  DoubleButton(const DoubleButton&);
  DoubleButton& operator=(const DoubleButton&);

protected:
  explicit DoubleButton(const Glib::ConstructParams& construct_params);
  explicit DoubleButton(doublebutton* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  doublebutton*       gobj()       { return reinterpret_cast<doublebutton*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const doublebutton* gobj() const { return reinterpret_cast<doublebutton*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
  virtual void on_secondpressed(int mbutton);
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


private:


public:
  explicit DoubleButton();
  
  
  /**
   * @par Prototype:
   * <tt>void on_my_%secondpressed(int mbutton)</tt>
   */

  Glib::SignalProxy1< void,int > signal_secondpressed();
;


};

}


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates ManuProC::DoubleButton
   */
  ManuProC::DoubleButton* wrap(doublebutton* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_DOUBLEBUTTON_H */

