// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtkmm/SearchCombo.h>
#include <gtkmm/private/SearchCombo_p.h>

/* $Id: SearchCombo.ccg,v 1.5 2004/04/29 14:24:40 christof Exp $ */

/* searchcombo.h
 * 
 * Copyright (C) 1999-2002 Adolf Petig GmbH & Co. KG
 * Copyright (C) 2009 Christof Petig
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtksearchcombo.h>

// for SigC 2.0
#include <sigc++/slot.h>

namespace Gtk
{
  SearchCombo::SearchCombo(bool alwaysfill,bool autoexpand)
  	: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::HBox(Glib::ConstructParams(searchcombo_class_.init()))
  {  set_always_fill(alwaysfill);
     set_autoexpand(autoexpand);
  }
               
} // namespace Gtk


namespace
{


static const Glib::SignalProxyInfo SearchCombo_signal_activate_info =
{
  "activate",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


static void SearchCombo_signal_search_callback(GtkSearchCombo* self, gboolean* cont,GtkSCContext context,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,gboolean *,GtkSCContext > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(cont, context);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }
}

static const Glib::SignalProxyInfo SearchCombo_signal_search_info =
{
  "search",
  (GCallback) &SearchCombo_signal_search_callback,
  (GCallback) &SearchCombo_signal_search_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gtk::SCContext>::value_type()
{
  return gtk_sc_context_get_type();
}


namespace Glib
{

Gtk::SearchCombo* wrap(GtkSearchCombo* object, bool take_copy)
{
  return dynamic_cast<Gtk::SearchCombo *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& SearchCombo_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SearchCombo_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_search_combo_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}

void SearchCombo_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
  klass->activate = &activate_callback;
  klass->search = &search_callback;
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void SearchCombo_Class::activate_callback(GtkSearchCombo* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->on_activate();
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->activate)
    (*base->activate)(self);
}
void SearchCombo_Class::search_callback(GtkSearchCombo* self, gboolean* cont, GtkSCContext context)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->on_search(cont, context);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->search)
    (*base->search)(self, cont, context);
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* SearchCombo_Class::wrap_new(GObject* o)
{
  return manage(new SearchCombo((GtkSearchCombo*)(o)));

}


/* The implementation: */

SearchCombo::SearchCombo(const Glib::ConstructParams& construct_params)
:
  Gtk::HBox(construct_params)
{
  }

SearchCombo::SearchCombo(GtkSearchCombo* castitem)
:
  Gtk::HBox((GtkHBox*)(castitem))
{
  }

SearchCombo::~SearchCombo()
{
  destroy_();
}

SearchCombo::CppClassType SearchCombo::searchcombo_class_; // initialize static member

GType SearchCombo::get_type()
{
  return searchcombo_class_.init().get_type();
}

GType SearchCombo::get_base_type()
{
  return gtk_search_combo_get_type();
}


void SearchCombo::set_value_in_list(bool value, bool empty)
{
gtk_searchcombo_set_value_in_list(gobj(), static_cast<int>(value), static_cast<int>(empty)); 
}

void SearchCombo::set_case_sensitive(bool val)
{
gtk_searchcombo_set_case_sensitive(gobj(), static_cast<int>(val)); 
}

void SearchCombo::add_item(const Glib::ustring & text)
{
gtk_searchcombo_add_item(gobj(), text.c_str()); 
}

void SearchCombo::reset()
{
gtk_searchcombo_reset(gobj()); 
}

void SearchCombo::set_text(const Glib::ustring & text)
{
gtk_searchcombo_set_text(gobj(), text.c_str()); 
}

Glib::ustring SearchCombo::get_text() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_searchcombo_get_text(const_cast<GtkSearchCombo*>(gobj())));
}

void SearchCombo::set_always_fill(bool val)
{
gtk_searchcombo_set_always_fill(gobj(), static_cast<int>(val)); 
}

void SearchCombo::set_enable_tab(bool val)
{
gtk_searchcombo_set_enable_tab(gobj(), static_cast<int>(val)); 
}

guint SearchCombo::get_size() const
{
  return gtk_searchcombo_get_size(const_cast<GtkSearchCombo*>(gobj()));
}

void SearchCombo::set_editable(bool val)
{
gtk_searchcombo_set_editable(gobj(), static_cast<int>(val)); 
}

void SearchCombo::set_autoexpand(bool val)
{
gtk_searchcombo_set_autoexpand(gobj(), static_cast<int>(val)); 
}

void SearchCombo::trigger_search()
{
gtk_searchcombo_trigger_search(gobj()); 
}

void SearchCombo::set_start_on_idle(bool val)
{
gtk_searchcombo_set_start_on_idle(gobj(), static_cast<int>(val)); 
}

 Entry* SearchCombo::get_entry()
{
  return Glib::wrap((GtkEntry*)(gobj()->entry));
}

const Entry* SearchCombo::get_entry() const
{
  return Glib::wrap((GtkEntry*)(gobj()->entry));
}
 
gint SearchCombo::get_selected_index() const
{
  return gtk_searchcombo_get_selected_index(const_cast<GtkSearchCombo*>(gobj()));
}


Glib::SignalProxy0< void > SearchCombo::signal_activate()
{
  return Glib::SignalProxy0< void >(this, &SearchCombo_signal_activate_info);
}


Glib::SignalProxy2< void,gboolean *,GtkSCContext > SearchCombo::signal_search()
{
  return Glib::SignalProxy2< void,gboolean *,GtkSCContext >(this, &SearchCombo_signal_search_info);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> SearchCombo::property_case_sensitive() 
{
  return Glib::PropertyProxy<bool>(this, "case-sensitive");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> SearchCombo::property_case_sensitive() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "case-sensitive");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> SearchCombo::property_allow_empty() 
{
  return Glib::PropertyProxy<bool>(this, "allow-empty");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> SearchCombo::property_allow_empty() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "allow-empty");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> SearchCombo::property_value_in_list() 
{
  return Glib::PropertyProxy<bool>(this, "value-in-list");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> SearchCombo::property_value_in_list() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "value-in-list");
}
#endif //GLIBMM_PROPERTIES_ENABLED


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void Gtk::SearchCombo::on_activate()
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->activate)
    (*base->activate)(gobj());
}
void Gtk::SearchCombo::on_search(gboolean * cont, GtkSCContext context)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->search)
    (*base->search)(gobj(),cont,context);
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gtk


